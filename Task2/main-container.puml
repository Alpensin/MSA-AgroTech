@startuml main context diagram AgroTech

' Задаем стиль
!NEW_C4_STYLE=1
!theme C4_violet from ../C4-PlantUML/themes

' Импортируем элементы
!include ../C4-PlantUML/C4_Container.puml

' Определяем акторов
' Для отправки метрик с iot можно использовать MQTT. А значит можно слать сразу в брокер. Переделать выделив отдельно брокер в c4 и c3
Enterprise_Boundary(farm, "Ферма"){
    System(farm_broker, "RabbitMQ", "Брокер")
    Person(operator, "Оператор", "Сотрудник на ферме")
    System_Boundary(edge_control, "Управление edge-устройствами"){
        Container(edge_control_api, "API", "Go", "управление edge-устройствами")
    }
    System(edge_device, "Edge-устройство", "Различные IoT датчики и пульты управления оборудованием")
    System(vid_mon, "Видеорегистратор", "Точка сбора видеопотоков с камер")
    System_Boundary(vid_mon_anal, "Анализ данных с видеомониторинга"){
        ' TODO: выбрать технологии позже
        Container(ai, "Видеоаналитика ИИ", "Python FastAPI", "API для видеопотоков, Анализ видеопотоков с помощью ИИ")
    }
    System_Boundary(notification, "Отправка уведомлений"){
        Container(notification_worker, "Воркер уведомлений", "Python", "Читает данные из брокера и перенаправляет нужному адресату. Отправлляет СМС.")
    }
    System_Boundary(scheduler, "Расписание"){
        Container(scheduler_api, "API расписаний", "Python FastAPI", "API для управления расписанием")
    }
}

' Рисуем связи


' В пределах фермы
Rel(ai, vid_mon, "Получает видеопотоки", "ONVIF")
Rel(ai, farm_broker, "Отправляет события и метрики, Читает изменения в расписании", "AMQP")

Rel(notification_worker, farm_broker, "Читает события и метрики", "AMQP")
Rel(notification_worker, operator, "Отправляет уведомления", "HTTPS (Websocket)")

Rel(edge_control_api, farm_broker, "Отправляет события, следит за изменением расписания", "AMQP")
Rel(edge_control_api, edge_device, "Отправляет управляющие команды", "HTTPS")


' Между фермой и цетральным сервером


' Между центральным сервером и общей системой предприятия